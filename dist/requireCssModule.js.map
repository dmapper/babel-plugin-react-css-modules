{"version":3,"sources":["../src/requireCssModule.js"],"names":["getFiletypeOptions","cssSourceFilePath","filetypes","extension","substr","lastIndexOf","filetype","getSyntax","filetypeOptions","syntax","require","getExtraPlugins","plugins","map","plugin","Array","isArray","pluginName","pluginOptions","getTokens","runner","options","from","src","test","STYLES_PATH","process","cwd","compiler","set","import","define","render","err","res","Error","lazyResult","warnings","forEach","message","console","warn","text","root","tokens","generateScopedName","context","fetch","to","fromDirectoryPath","toPath","extraPlugins","Values","LocalByDefault","ExtractImports","Scope","Parser"],"mappings":"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","file":"requireCssModule.js","sourcesContent":["// @flow\n\nimport {\n  dirname,\n  resolve,\n  join\n} from 'path';\nimport {\n  readFileSync,\n  existsSync\n} from 'fs';\nimport postcss from 'postcss';\nimport genericNames from 'generic-names';\nimport ExtractImports from 'postcss-modules-extract-imports';\nimport LocalByDefault from 'postcss-modules-local-by-default';\nimport Parser from 'postcss-modules-parser';\nimport Scope from 'postcss-modules-scope';\nimport Values from 'postcss-modules-values';\nimport stylus from 'stylus';\nimport type {\n  GenerateScopedNameConfigurationType,\n  StyleModuleMapType\n} from './types';\n\ntype FiletypeOptionsType = {|\n  +syntax: string,\n  +plugins?: $ReadOnlyArray<string | $ReadOnlyArray<[string, mixed]>>\n|};\n\ntype FiletypesConfigurationType = {\n  [key: string]: FiletypeOptionsType\n};\n\nconst getFiletypeOptions = (cssSourceFilePath: string, filetypes: FiletypesConfigurationType): ?FiletypeOptionsType => {\n  const extension = cssSourceFilePath.substr(cssSourceFilePath.lastIndexOf('.'));\n  const filetype = filetypes ? filetypes[extension] : null;\n\n  return filetype;\n};\n\n// eslint-disable-next-line flowtype/no-weak-types\nconst getSyntax = (filetypeOptions: FiletypeOptionsType): ?(Function | Object) => {\n  if (!filetypeOptions || !filetypeOptions.syntax) {\n    return null;\n  }\n\n  // eslint-disable-next-line import/no-dynamic-require, global-require\n  return require(filetypeOptions.syntax);\n};\n\n// eslint-disable-next-line flowtype/no-weak-types\nconst getExtraPlugins = (filetypeOptions: ?FiletypeOptionsType): $ReadOnlyArray<*> => {\n  if (!filetypeOptions || !filetypeOptions.plugins) {\n    return [];\n  }\n\n  return filetypeOptions.plugins.map((plugin) => {\n    if (Array.isArray(plugin)) {\n      const [pluginName, pluginOptions] = plugin;\n\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      return require(pluginName)(pluginOptions);\n    }\n\n    // eslint-disable-next-line import/no-dynamic-require, global-require\n    return require(plugin);\n  });\n};\n\nconst getTokens = (runner, cssSourceFilePath: string, filetypeOptions: ?FiletypeOptionsType): StyleModuleMapType => {\n  // eslint-disable-next-line flowtype/no-weak-types\n  const options: Object = {\n    from: cssSourceFilePath\n  };\n  let src = readFileSync(cssSourceFilePath, 'utf-8');\n\n  if (/\\.styl$/.test(cssSourceFilePath)) {\n    const STYLES_PATH = join(process.cwd(), 'styles/index.styl');\n    const compiler = stylus(src);\n\n    compiler.set('filename', cssSourceFilePath);\n\n    // TODO: Make this a setting\n    if (existsSync(STYLES_PATH)) {\n      compiler.import(STYLES_PATH);\n    }\n    compiler.define('__WEB__', true);\n    compiler.render((err, res) => {\n      if (err) {\n        throw new Error(err);\n      }\n      src = res;\n    });\n  } else if (filetypeOptions) {\n    options.syntax = getSyntax(filetypeOptions);\n  }\n\n  const lazyResult = runner\n    .process(src, options);\n\n  lazyResult\n    .warnings()\n    .forEach((message) => {\n      // eslint-disable-next-line no-console\n      console.warn(message.text);\n    });\n\n  return lazyResult.root.tokens;\n};\n\ntype OptionsType = {|\n  filetypes: FiletypesConfigurationType,\n  generateScopedName?: GenerateScopedNameConfigurationType,\n  context?: string\n|};\n\nexport default (cssSourceFilePath: string, options: OptionsType): StyleModuleMapType => {\n  // eslint-disable-next-line prefer-const\n  let runner;\n\n  let generateScopedName;\n\n  if (options.generateScopedName && typeof options.generateScopedName === 'function') {\n    generateScopedName = options.generateScopedName;\n  } else {\n    generateScopedName = genericNames(options.generateScopedName || '[path]___[name]__[local]___[hash:base64:5]', {\n      context: options.context || process.cwd()\n    });\n  }\n\n  const filetypeOptions = getFiletypeOptions(cssSourceFilePath, options.filetypes);\n\n  const fetch = (to: string, from: string) => {\n    const fromDirectoryPath = dirname(from);\n    const toPath = resolve(fromDirectoryPath, to);\n\n    return getTokens(runner, toPath, filetypeOptions);\n  };\n\n  const extraPlugins = getExtraPlugins(filetypeOptions);\n\n  const plugins = [\n    ...extraPlugins,\n    Values,\n    LocalByDefault,\n    ExtractImports,\n    new Scope({\n      generateScopedName\n    }),\n    new Parser({\n      fetch\n    })\n  ];\n\n  runner = postcss(plugins);\n\n  return getTokens(runner, cssSourceFilePath, filetypeOptions);\n};\n"]}